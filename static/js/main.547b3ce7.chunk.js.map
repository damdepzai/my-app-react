{"version":3,"sources":["views/Steps/Step1.js","views/Steps/Step2.js","views/Steps/Step3.js","views/Steps/Preview.js","views/Steps/index.js","App.js","serviceWorker.js","index.js"],"names":["Step1","totalStep","setStep","setTotalStep","useForm","register","handleSubmit","errors","watch","onSubmit","data","data_clone","meal","people","className","name","ref","required","selected","category","map","key","value","type","defaultValue","id","class","Step2","onClick","Step3","Preview","Step","step","renderStepper","item","number","href","next","useEffect","console","log","App","useState","currentStep","currentSetStep","listRestaurants","restauranted","setTotalSep","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.547b3ce7.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nconst Step1 = ( { totalStep,setStep,setTotalStep }) =>{\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n\r\n    const onHandleSubmit = data => {\r\n       setStep(2);\r\n\r\n       let data_clone = [...totalStep];\r\n       data_clone[0].data.meal = data.meal;\r\n       data_clone[0].data.people = data.people;\r\n\r\n\r\n      setTotalStep(data_clone)\r\n\r\n    }\r\n     return(\r\n         <form onSubmit={handleSubmit(onHandleSubmit)}>\r\n            <div className=\"col-6 m-auto\">\r\n                <div className=\"form-group\">\r\n                    <p>Please select a Meal</p>\r\n                    <select name=\"meal\" className=\"browser-default custom-select\" ref={register({ required: true })} >\r\n                        <option selected>------Restaurant--------</option>\r\n                        {totalStep[0].category.map(({value, name}, key) => (\r\n                            <option value={value} key={key}>{name}</option>\r\n                        ))}\r\n                    </select>\r\n                    {errors.meal && <span>This field is required</span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <p>Please enter number of people</p>\r\n                    <input type=\"text\" name=\"people\" defaultValue={totalStep[0].data.people} id=\"form1\" className=\"form-control\" ref={register({ required: true })} />\r\n                    {errors.people && <span className=\"text-danger\">This field is required</span>}\r\n                </div>\r\n            </div>\r\n           \r\n            <button class=\"btn\" type=\"submit\">\r\n                    Next <span class=\"badge badge-primary\"></span>\r\n            </button>\r\n        </form>\r\n    )\r\n\r\n}\r\nexport default Step1","import React from 'react'\r\nimport {useForm} from 'react-hook-form'\r\n\r\nconst Step2 = ({totalStep,setStep,setTotalStep}) => {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n\r\n    const onHandleSubmit = data => {\r\n       setStep(3);\r\n\r\n       let data_clone = [...totalStep];\r\n       data_clone[0].data.meal = data.meal;\r\n       data_clone[0].data.people = data.people;\r\n\r\n\r\n      setTotalStep(data_clone)\r\n\r\n    }\r\n    const pre = () => {\r\n        setStep(1)\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit(onHandleSubmit)}>\r\n            <div className=\"col-6 m-auto\">\r\n                <div className=\"form-group\">\r\n                    <p>Please select restaurant</p>\r\n                    <select className=\"browser-default custom-select\">\r\n                        <option selected>Open this select menu</option>\r\n                        <option value=\"1\">One</option>\r\n                        <option value=\"2\">Two</option>\r\n                        <option value=\"3\">Three</option>\r\n                    </select>\r\n                </div>\r\n                <button class=\"btn\"onClick={pre}>\r\n                        Pre <span class=\"badge badge-primary\"></span>\r\n                </button>\r\n\r\n                <button class=\"btn\" type=\"submit\">\r\n                        Next <span class=\"badge badge-primary\"></span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default Step2\r\n","import React from 'react'\r\nimport {useForm} from 'react-hook-form'\r\n\r\nconst Step3 = ({ totalStep,setStep,setTotalStep }) => {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const onHandleSubmit = data => {\r\n        setStep(4)\r\n        let data_clone = [...totalStep];\r\n        data_clone[0].data.meal = data.meal;\r\n        data_clone[0].data.people = data.people;\r\n \r\n \r\n       setTotalStep(data_clone)\r\n \r\n     }\r\n     const pre = () => {\r\n         setStep(2)\r\n     }\r\n    return (\r\n        <form onSubmit={handleSubmit(onHandleSubmit)}>\r\n             <div className=\"col-6 m-auto\">\r\n                <div className=\"row\">\r\n                    <div className=\" col-6\">\r\n                        <p>Please select restaurant</p>\r\n                        <select className=\"browser-default custom-select\">\r\n                            <option selected>Open this select menu</option>\r\n                            <option value=\"1\">One</option>\r\n                            <option value=\"2\">Two</option>\r\n                            <option value=\"3\">Three</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                    <p>Please enter number no of servings</p>\r\n                        <input type=\"text\" id=\"form1\" className=\"form-control\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-control\">\r\n                <button ><i className=\"fa fa-plus-circle\"></i></button>\r\n                </div>\r\n                <button class=\"btn\" onClick={pre}>\r\n                        Pre <span class=\"badge badge-primary\"></span>\r\n                </button>\r\n\r\n                <button class=\"btn\">\r\n                        Next <span class=\"badge badge-primary\"></span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default Step3\r\n","import React from 'react'\r\nimport {useForm} from 'react-hook-form'\r\n\r\nconst Preview = ({ totalStep,setStep,setTotalStep }) => {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const onHandleSubmit = data => {\r\n        let data_clone = [...totalStep];\r\n        data_clone[0].data.meal = data.meal;\r\n        data_clone[0].data.people = data.people;\r\n \r\n \r\n       setTotalStep(data_clone)\r\n \r\n     }\r\n     const pre = () => {\r\n         setStep(3)\r\n     }\r\n    return (\r\n        <form onSubmit={handleSubmit(onHandleSubmit)}>\r\n            <div className=\"md6 m-auto\">\r\n                    <div className=\"row\">\r\n                        <p className=\"md-6\">Meal</p>\r\n                        <p className=\"md-6\">Lunch</p>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <p className=\"md-6 p-50\">Meal</p>\r\n                        <p className=\"md-6\">Lunch</p>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <p className=\"md-6 p-50\">Meal</p>\r\n                        <p className=\"md-6\">Lunch</p>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <p className=\"md-6 p-50\">Meal</p>\r\n                        <p className=\"md-6\">Lunch</p>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <p className=\"md-6 p-50\">Meal</p>\r\n                        <p className=\"md-6\">Lunch</p>\r\n                    </div>\r\n                    <button class=\"btn\" onClick={pre}>\r\n                        Pre <span class=\"badge badge-primary\"></span>\r\n                </button>\r\n\r\n                <button class=\"btn\" type=\"submit\">\r\n                        Submit <span class=\"badge badge-primary\"></span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default Preview\r\n","import React, {useEffect} from 'react'\r\nimport Step1 from './Step1.js'\r\nimport Step2 from './Step2.js'\r\nimport Step3 from './Step3.js'\r\nimport Preview from './Preview'\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n\r\nconst Step = ({step, setStep, totalStep,setTotalStep}) => {\r\n\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const onSubmit = data => {\r\n        console.log(data)\r\n    };\r\n    const renderStepper = () => {\r\n        return (\r\n            totalStep.map((item, key) => (\r\n                <li key={key} className={item.number === step ? 'active' : ''}>\r\n                    <a href=\"#!\">\r\n                        <span className=\"circle\">{item.number}</span>\r\n                        <span className=\"label\">{item.name}</span>\r\n                    </a>\r\n                </li>\r\n            ))\r\n        )\r\n    }\r\n    const renderViewStep = () =>{\r\n        return (\r\n            <div>\r\n                {step == 1 ? <Step1 setStep={setStep} totalStep={totalStep} setTotalStep={setTotalStep}></Step1> : ''}\r\n                {step == 2 ? <Step2 setStep={setStep} totalStep={totalStep} setTotalStep={setTotalStep}></Step2> : ''}\r\n                {step == 3 ? <Step3 setStep={setStep} totalStep={totalStep} setTotalStep={setTotalStep}></Step3> : ''}\r\n                {step == 4 ? <Preview setStep={setStep} totalStep={totalStep} setTotalStep={setTotalStep}></Preview> : ''}\r\n\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    const pre = () => {\r\n        setStep(step - 1)\r\n    }\r\n\r\n    const next = () => {\r\n        if(step >3){\r\n            setStep(step + 1)\r\n        }\r\n\r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n        renderStepper()\r\n    }, [step])\r\n    let buttonPre;\r\n    if (step >1) {\r\n        buttonPre = <button className=\"btn\" onClick={pre}>\r\n             Pre <span className=\"badge badge-primary\"></span>\r\n        </button>\r\n    }\r\n    let buttonNext;\r\n    if(step <= 3){\r\n        buttonNext = <button type=\"submit\"  className=\"btn\" onClick={next}>\r\n        Next <span className=\"badge badge-primary\"></span>\r\n    </button>\r\n    }\r\n    else{\r\n        buttonNext = <button type=\"submit\"  className=\"btn\" onClick={next}>\r\n        Submit <span className=\"badge badge-primary\"></span>\r\n        </button>\r\n    }\r\n    return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12 \">\r\n                    <ul className=\"stepper stepper-horizontal\"> \r\n                        {renderStepper()}\r\n                    </ul>\r\n                </div>\r\n                <form className=\"col-md-7 m-auto \" onSubmit={handleSubmit(onSubmit)}>\r\n                    <div >\r\n                        <div className=\"container\">\r\n                            {renderViewStep()}\r\n                        </div>\r\n                        <div className=\"md-6  m-auto\">\r\n                                {/* {buttonPre}\r\n                                {buttonNext} */}\r\n                        </div>\r\n                    </div>\r\n                     \r\n                </form>\r\n            </div>\r\n     \r\n    )\r\n}\r\n\r\n\r\nexport default Step\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Step from './views/Steps';\r\n\r\nfunction App() {\r\n  const [currentStep, currentSetStep] = useState(1);\r\n  const [totalStep, setTotalSep] = useState([\r\n    {\r\n      name: 'Step 1', \r\n      number: 1, \r\n      category:[\r\n        {\r\n          value:1,\r\n          name:'breakfast'\r\n        },\r\n        {\r\n          value:2,\r\n          name:'lunch'\r\n        },\r\n        {\r\n          value:3,\r\n          name:'dinner'\r\n        }\r\n      ],\r\n      data: {\r\n        meal:null,\r\n        people:null,\r\n      }\r\n    },\r\n    {\r\n      name: 'Step 2',\r\n      number: 2,\r\n      listRestaurants :[\r\n        {\r\n          value:1,\r\n          name:'Restaurant 1'\r\n        },\r\n        {\r\n          value:2,\r\n          name:'Restaurant 2'\r\n        },\r\n        {\r\n          value:3,\r\n          name:'Restaurant 3'\r\n        },\r\n        {\r\n          value:4,\r\n          name:'Restaurant 3'\r\n        },\r\n      ],\r\n      data:{\r\n        restauranted:null\r\n      }\r\n    },\r\n    {\r\n       name: 'Step 3',\r\n       number: 3,\r\n       data:{\r\n\r\n       }\r\n\r\n    },\r\n    {\r\n      name: 'Preview',\r\n      number:4\r\n    },\r\n  ]);\r\n  \r\n\r\n  return (\r\n    <div className=\"App\">\r\n       <Step step={currentStep} setStep={currentSetStep} totalStep={totalStep}  setTotalStep={setTotalSep}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}